/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//package crypto;

/**
 *
 * @author nikhil
 */
import java.math.BigInteger; 
import java.security.MessageDigest; 
import java.security.NoSuchAlgorithmException; 


public class Crypto extends javax.swing.JFrame {

    /**
     * Creates new form Crypto
     */
    public Crypto() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        textfield = new javax.swing.JTextField();
        textlabel = new javax.swing.JLabel();
        submit = new javax.swing.JToggleButton();
        md2 = new javax.swing.JCheckBox();
        md2hash = new javax.swing.JTextField();
        md5hash = new javax.swing.JTextField();
        md5 = new javax.swing.JCheckBox();
        sha1hash = new javax.swing.JTextField();
        sha1 = new javax.swing.JCheckBox();
        sha384 = new javax.swing.JCheckBox();
        sha384hash = new javax.swing.JTextField();
        sha512 = new javax.swing.JCheckBox();
        sha512hash = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Crypto");

        textfield.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        textlabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        textlabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        textlabel.setText("Text :");
        textlabel.setToolTipText("");

        submit.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        submit.setText("submit");
        submit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submitMouseClicked(evt);
            }
        });

        md2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        md2.setText("MD2");

        md2hash.setEditable(false);
        md2hash.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        md5hash.setEditable(false);
        md5hash.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        md5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        md5.setText("MD5");

        sha1hash.setEditable(false);
        sha1hash.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        sha1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        sha1.setText("SHA1");

        sha384.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        sha384.setText("SHA384");

        sha384hash.setEditable(false);
        sha384hash.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        sha512.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        sha512.setText("SHA512");

        sha512hash.setEditable(false);
        sha512hash.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(textlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sha512)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(md2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(md5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sha1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sha384, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textfield)
                        .addGap(97, 97, 97))
                    .addComponent(md2hash)
                    .addComponent(md5hash)
                    .addComponent(sha1hash)
                    .addComponent(sha384hash)
                    .addComponent(sha512hash)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(submit)
                        .addGap(0, 212, Short.MAX_VALUE)))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(md2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(md2hash, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(md5hash, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(md5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sha1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sha1hash, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sha384hash, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sha384, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sha512hash, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sha512, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(152, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void submitMouseClicked(java.awt.event.MouseEvent evt) {                                    
        // TODO add your handling code here:
        String input=textfield.getText();
        
        if(md2.isSelected())
        {
            String temp;
            temp = md2Hashing(input);
            md2hash.setText(temp);
        } else {
            md2hash.setText(" ");
        }
        if(md5.isSelected())
        {
            String temp;
            temp = md5Hashing(input);
            md5hash.setText(temp);
        }else{
            md5hash.setText(" ");
        }
        if(sha1.isSelected())
        {
            String temp;
            temp = sha1Hashing(input);
            sha1hash.setText(temp);
        }else{
            sha1hash.setText(" ");
        }
        if(sha384.isSelected())
        {
            String temp;
            temp = sha384Hashing(input);
            sha384hash.setText(temp);
        }else{
            sha384hash.setText(" ");
        }
        if(sha512.isSelected())
        {
            String temp;
            temp = sha512Hashing(input);
            sha512hash.setText(temp);
        }else{
            sha512hash.setText(" ");
        }
    }                                   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Crypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Crypto().setVisible(true);
            }
        });
    }

    /**
     *
     * @param input
     * @return
     */
    public static String md2Hashing(String input) 
    { 
        try { 
            // getInstance() method is called with algorithm MD2 
            MessageDigest md = MessageDigest.getInstance("MD2"); 

            // digest() method is called 
            // to calculate message digest of the input string 
            // returned as array of byte 
            byte[] messageDigest = md.digest(input.getBytes()); 

            // Convert byte array into signum representation 
            BigInteger no = new BigInteger(1, messageDigest); 

            // Convert message digest into hex value 
            String hashtext = no.toString(16); 

            // Add preceding 0s to make it 32 bit 
            while (hashtext.length() < 32) { 
                    hashtext = "0" + hashtext; 
            } 

            // return the HashText 
            return hashtext; 
        } 

        // For specifying wrong message digest algorithms 
        catch (NoSuchAlgorithmException e) { 
            throw new RuntimeException(e); 
        } 
    } 

    /**
     *
     * @param input
     * @return
     */
    public static String md5Hashing(String input) 
    { 
        try { 

            // Static getInstance method is called with hashing MD5 
            MessageDigest md = MessageDigest.getInstance("MD5"); 

            // digest() method is called to calculate message digest 
            // of an input digest() return array of byte 
            byte[] messageDigest = md.digest(input.getBytes()); 

            // Convert byte array into signum representation 
            BigInteger no = new BigInteger(1, messageDigest); 

            // Convert message digest into hex value 
            String hashtext = no.toString(16); 
            while (hashtext.length() < 32) { 
                    hashtext = "0" + hashtext; 
            } 
            return hashtext; 
        } 

        // For specifying wrong message digest algorithms 
        catch (NoSuchAlgorithmException e) { 
            throw new RuntimeException(e); 
        } 
    } 

    /**
     *
     * @param input
     * @return
     */
    public static String sha1Hashing(String input) 
    { 
        try { 
            // getInstance() method is called with algorithm SHA-1 
            MessageDigest md = MessageDigest.getInstance("SHA-1"); 

            // digest() method is called 
            // to calculate message digest of the input string 
            // returned as array of byte 
            byte[] messageDigest = md.digest(input.getBytes()); 

            // Convert byte array into signum representation 
            BigInteger no = new BigInteger(1, messageDigest); 

            // Convert message digest into hex value 
            String hashtext = no.toString(16); 

            // Add preceding 0s to make it 32 bit 
            while (hashtext.length() < 32) { 
                    hashtext = "0" + hashtext; 
            } 

            // return the HashText 
            return hashtext; 
        } 

        // For specifying wrong message digest algorithms 
        catch (NoSuchAlgorithmException e) { 
            throw new RuntimeException(e); 
        } 
    } 
 
    /**
     *
     * @param input
     * @return
     */
    public static String sha384Hashing(String input) 
    { 
        try { 
            // getInstance() method is called with algorithm SHA-384 
            MessageDigest md = MessageDigest.getInstance("SHA-384"); 

            // digest() method is called 
            // to calculate message digest of the input string 
            // returned as array of byte 
            byte[] messageDigest = md.digest(input.getBytes()); 

            // Convert byte array into signum representation 
            BigInteger no = new BigInteger(1, messageDigest); 

            // Convert message digest into hex value 
            String hashtext = no.toString(16); 

            // Add preceding 0s to make it 32 bit 
            while (hashtext.length() < 32) { 
                    hashtext = "0" + hashtext; 
            } 

            // return the HashText 
            return hashtext; 
        } 

        // For specifying wrong message digest algorithms 
        catch (NoSuchAlgorithmException e) { 
            throw new RuntimeException(e); 
        } 
    } 

    public static String sha512Hashing(String input) 
    { 
        try { 
            // getInstance() method is called with algorithm SHA-512 
            MessageDigest md = MessageDigest.getInstance("SHA-512"); 

            // digest() method is called 
            // to calculate message digest of the input string 
            // returned as array of byte 
            byte[] messageDigest = md.digest(input.getBytes()); 

            // Convert byte array into signum representation 
            BigInteger no = new BigInteger(1, messageDigest); 

            // Convert message digest into hex value 
            String hashtext = no.toString(16); 

            // Add preceding 0s to make it 32 bit 
            while (hashtext.length() < 32) { 
                    hashtext = "0" + hashtext; 
            } 

            // return the HashText 
            return hashtext; 
        } 

        // For specifying wrong message digest algorithms 
        catch (NoSuchAlgorithmException e) { 
            throw new RuntimeException(e); 
        } 
    } 



    // Variables declaration - do not modify                     
    private javax.swing.JCheckBox md2;
    private javax.swing.JTextField md2hash;
    private javax.swing.JCheckBox md5;
    private javax.swing.JTextField md5hash;
    private javax.swing.JCheckBox sha1;
    private javax.swing.JTextField sha1hash;
    private javax.swing.JCheckBox sha384;
    private javax.swing.JTextField sha384hash;
    private javax.swing.JCheckBox sha512;
    private javax.swing.JTextField sha512hash;
    private javax.swing.JToggleButton submit;
    private javax.swing.JTextField textfield;
    private javax.swing.JLabel textlabel;
    // End of variables declaration                   
}
